@model Housematica.Data.Data.CMS.Single;
@{
    Layout = "/Views/Shared/_ComponentLayout.cshtml";
}

@section scripts{
    <script>

        var canvas = document.getElementById("renderCanvas");

        var engine = null;
        var scene = null;

        var sceneToRender = null;
        var createDefaultEngine = function() { return new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true }); };




        /// <reference path="../../dist/preview release/babylon.d.ts"/>


function delayCreateScene() {

    scenes = [];

     @for (int i = 0; i < Model.SingleFloor.Count(); i++)
     {
         <text>
             var scene@(i+1) = new BABYLON.Scene(engine);
             scenes.push(scene@(i+1));
        </text>
     }
            // Create scenes and push in an array.

    @for (int k = 0; k < Model.SingleFloor.Count(); k++)
     {
         <text>
               var camera@(k+1) = new BABYLON.ArcRotateCamera("camera@(k+1)",  0, 0, 0, new BABYLON.Vector3(0, 0, -0), scene@(k+1));
        </text>
     }
    camera1.wheelprecision = 24000;


    @for (int j = 0; j < Model.SingleFloor.Count(); j++)
     {
         <text>
             BABYLON.SceneLoader.Append("https://cdn.housematica.pl/cdn/@Model.Projects.IdProject/@Model.Name/ApartmentVariant" + "@(j+1)" + "/", "@Model.SingleFloor[j].FloorModel", scene@(j+1),function (scene@(j+1)) {
                scene@(j+1).createDefaultCameraOrLight(true, true, true);
                scene@(j+1).clearColor = new BABYLON.Color3(255,255,255);

                //ile do góry
                scene@(j+1).activeCamera.lowerBetaLimit = 0.3;


                //ile do dołu
                scene@(j+1).activeCamera.upperBetaLimit = 1.5;


                var light = new BABYLON.DirectionalLight("light@(j+1)", new BABYLON.Vector3(-2, -6, -2), scene@(j+1));
                light.position = new BABYLON.Vector3(20, 60, 20);
                light.shadowMinZ = 30;
                light.shadowMaxZ = 180;
                light.intensity = 1;

                var generator = new BABYLON.ShadowGenerator(512, light);
                generator.useContactHardeningShadow = true;
                generator.bias = 0.01;
                generator.normalBias= 0.05;
                generator.contactHardeningLightSizeUVRatio = 0.08;



               for (var i = 0; i == (scene@(j+1).meshes.length-1); i++) {
				generator.addShadowCaster(scene@(j+1).meshes@(j+1));
				scene@(j+1).meshes@(j+1).receiveShadows = true;
				if (scene@(j+1).meshes@(j+1).material && scene@(j+1).meshes@(j+1).material.bumpTexture) {
					scene@(j+1).meshes@(j+1).material.bumpTexture.level = 2;
				}
			}




                camera@(j+1) = scene@(j+1).activeCamera;
            });

        </text>
     }








         // Append glTF model to scene.





         //Switch scenes every 3 sec




         //runRenderLoop inside a setTimeout is neccesary in the Playground
         //to stop the PG's runRenderLoop.

         return scene1;

     }

function changeScene(wersja){
    currentScene = scenes[wersja];
    engine.stopRenderLoop();
    engine.runRenderLoop(function () {


                    currentScene.render();

    });
};

var engine;
try {
    engine = createDefaultEngine();
} catch(e) {
    console.log("the available createEngine function failed. Creating the default engine instead");
    engine = createDefaultEngine();
}
        if (!engine) throw 'engine should not be null.';
        scene = delayCreateScene();;
        sceneToRender = scene

        engine.runRenderLoop(function () {
            if (sceneToRender) {
                sceneToRender.render();
            if (scene.isReady()) {
                $(".loader").addClass("loader-hide");
            }
            }
        });

        // Resize


    </script>
}